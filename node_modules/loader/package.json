{
  "name": "loader",
  "version": "0.0.12",
  "description": "Assets loader.",
  "main": "index.js",
  "scripts": {
    "test": "make test-all"
  },
  "keywords": [
    "Loader"
  ],
  "bin": {
    "loader": "bin/build"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/JacksonTian/loader.git"
  },
  "config": {
    "blanket": {
      "pattern": "loader/lib",
      "data-cover-flags": {
        "debug": false
      }
    },
    "travis-cov": {
      "threshold": 98
    }
  },
  "dependencies": {
    "uglify-js": "=2.4.6",
    "clean-css": "=2.0.2",
    "less": "=1.7.0"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "supertest": "*",
    "connect": "*",
    "blanket": "*",
    "travis-cov": "*",
    "coveralls": "*",
    "mocha-lcov-reporter": "*"
  },
  "author": {
    "name": "Jackson Tian"
  },
  "license": "MIT",
  "readme": "loader [![Build Status](https://secure.travis-ci.org/JacksonTian/loader.png?branch=master)](http://travis-ci.org/JacksonTian/loader) [![Coverage Status](https://coveralls.io/repos/JacksonTian/loader/badge.png)](https://coveralls.io/r/JacksonTian/loader)\n==========================\n\nNode静态资源加载器。该模块通过两个步骤配合完成，代码部分根据环境生成标签。上线时，需要调用minify方法进行静态资源的合并和压缩。\n\n# Usage\n## Installation\n\n```bash\n$ npm install loader\n```\n\n## Example\nController:\n\n```js\nres.render(tpl, {\n  Loader: require('loader')\n});\n```\nView:\n```html\n<%- Loader(\"/assets/scripts/jqueryplugin.min.js\", \"/assets/styles/jqueryplugin.min.css\")\n  .js(\"/assets/scripts/lib/jquery.jmodal.js\")\n  .js(\"/assets/scripts/lib/jquery.mousewheel.min.js\")\n  .js(\"/assets/scripts/lib/jquery.tagsphere.min.js\")\n  .css(\"/assets/styles/jquery.autocomplate.css\")\n  .done(assetsMap, prefix, combo) %>\n```\n\n### 环境判别\n环境判别由`done`方法的第三个参数决定，如果传入combo值，将决定选用线下版本还是线上版本。如果不传入第三个参数，将由环境变量。如下代码实现：\n\n```\nprocess.env.NODE_ENV === 'production'\n```\n如果不传入combo，需要设置环境，通过以下代码实现：\n\n```\n# 生产环境\nexport NODE_ENV=\"production\"\n# 开发环境\nexport NODE_ENV=\"dev\"\n```\n可切换进`example`目录运行示例代码：\n\n```\n$ npm start\n```\n\n### 线上输出\n线上模式将会输出合并和压缩后的地址，该地址从Loader构造参数中得到。\n\n```html\n<script src=\"/assets/scripts/jqueryplugin.min.js?version=version\"></script>\n<link rel=\"stylesheet\" href=\"/assets/styles/jqueryplugin.min.css?version=version\" media=\"all\" />\n```\n\n如果你有CDN地址，可以传入prefix参数，使得可以一键切换到CDN地址上，实现网络加速。以下为结果示例：\n\n```html\n<script src=\"http://cnodejs.qiniudn.com/assets/scripts/jqueryplugin.min.js?version=version\"></script>\n<link rel=\"stylesheet\" href=\"http://cnodejs.qiniudn.com/assets/styles/jqueryplugin.min.css?version=version\" media=\"all\" />\n```\n\n### 线下输出\n线下模式输出为原始的文件地址。\n\n```html\n<script src=\"/assets/scripts/lib/jquery.jmodal.js\"></script>\n<script src=\"/assets/scripts/lib/jquery.mousewheel.min.js\"></script>\n<script src=\"/assets/scripts/lib/jquery.tagsphere.min.js\"></script>\n<link rel=\"stylesheet\" href=\"/assets/styles/jquery.autocomplate.css\" media=\"all\" />\n```\n\n## 流程\n![流程](./figures/flow.png)\n\n## API\n请参见[API文档](http://html5ify.com/loader/api.html)。\n\n## LESS支持\nLoader中支持less文件与普通的CSS文件没有差别，通过`.css()`加载即可。\n\n```\n<%- Loader(\"/assets/styles/jqueryplugin.min.css\")\n  .css(\"/assets/styles/jquery.autocomplate.css\")\n  .css(\"/assets/styles/bootstrap.less\")\n  .done(assetsMap, prefix, combo) %>\n```\n\n默认情况下会输出less的原始文件，需要借助`Loader.less(root)`中间来拦截`.less`文件的请求，它将自动将其转换为CSS内容。示例如下：\n\n```\napp.use(Loader.less(__dirname)); // Loader.less一定要在静态文件中间件之前，否则.less文件会被静态文件中间件所处理\napp.use('/assets', connect.static(__dirname + '/assets', { maxAge: 3600000 * 24 * 365 }));\n```\n\n在扫描静态文件、合并压缩方面，没有任何改动。\n\n# License\n[MIT license](https://github.com/JacksonTian/loader/blob/master/MIT-License)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JacksonTian/loader/issues"
  },
  "homepage": "https://github.com/JacksonTian/loader",
  "_id": "loader@0.0.12",
  "dist": {
    "shasum": "82daf44d015a50b628f4f739c90d27a205abb076"
  },
  "_from": "loader@0.0.12",
  "_resolved": "https://registry.npmjs.org/loader/-/loader-0.0.12.tgz"
}
